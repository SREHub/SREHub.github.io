{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction airdb-wiki.github.io 是使用 gitbook template 创建的文档。主要用于记录日常使用的一些技术和信息。 快速链接 分类 链接 项目管理 studygolang 项目管理 bbhj 开发手册 Development 面试经验 interview 基础知识 Linux IaaS kubernetes 方式 work AI ai Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part1/":{"url":"wiki/part1/","title":"Part 1: Comm","keywords":"","body":"公共部分 公共部分内容 Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part1/4-ways-to-learn.html":{"url":"wiki/part1/4-ways-to-learn.html","title":"四种学习方法","keywords":"","body":"四种学习方法 (来源：搜狐, 侵删) 一、费曼学习法： 费曼学习法的灵感源于诺贝尔物理奖获得者理查德费曼（Richard Feynman），运用费曼技巧,你只需花上20分钟就能深入理解知识点,而且记忆深刻,难以遗忘。知识有两种类型，我们绝大多数人关注的都是错误的那类。第一类知识注重了解某个事物的名称。第二类知识注重了解某件事物。这可不是一回事儿。著名的诺贝尔物理学家理查德·费曼（Richard Feynman）能够理解这二者间的差别，这也是他成功最重要的原因之一。事实上，他创造了一种学习方法，确保他会比别人对事物了解得更透彻。 运用步骤： 1、获取知识（某概念） ，理解你所要学习的材料的内容。 2、讲解/复述 你所获得的主要内容。 3、用你自己的方式以 潜意识的形式 再次 复述 你所学到的知识。 4、这一步是一个 可循环过程 ：不满意——纠错反馈；满意——尝试运用更简单精炼的语言概括。再用你所学到的知识解决实际问题，加以运用。 5、反思 。 反思你在思考的时候在哪里卡了壳，着重这个地方，再次理解。这个过程至关重要！ 6、检验。 通过不断的进行实践检验才能巩固你对于该知识点的理解。 二、思维导图学习法： 思维导图法又称为心智图法（Mind mapping），是一项流行的全脑式学习方法，它能够将各种点子、想法以及它们之间的关联性以图像视觉的景象呈现。它能够将一些核心概念、事物与另一些概念、事物形象地概念组织起来，输入我们脑内的记忆树图。它允许我们对复杂的概念、信息、数据进行组织加工，以更形象、易懂的形式展现在我们面前。 思维导图法总是从一些中心概念、问题入手。 非常典型的是一些与中心概念线形连接关键字、短语或图像。 我们中的大多数人都是视觉导向的，通过运用结构、关键字、颜色、图像、超链接（以及声音），将外部概念引入我们的思维和生活。简而言之，心智图法就是将中心概念与关联概念连接起来的一种方法。 不同于我们在学校里所学到的直线性思考方法，心智图法通过训练运用全脑思考，来刺激我们的想象力和创造力。因此，它被认为是全面调动分析能力和创造能力的一种思考方法。 思维导图的要点： 1、将主要概念、想法放置于图的中心位置。 最好用图片来表示它。 2、尽量使用大空间，以便稍后你有足够的空间添加其他内容。 3、如果有帮助的话，可以使用不同的颜色和大写字母。 个性化你的心智图。 4、在心智图上寻找、发现关系。 5、为次级主体建立次级中心。 三、西蒙学习法 是指诺贝尔经济学奖获得者西蒙教授提出的一个理论：“对于一个有一定基础的人来说，只要真正肯下功夫，在6个月内就可以掌握任何一门学问。” 西蒙教授立论所依据的实验心理的研究成果表明：一个人1分钟到1分半钟可以记忆一个信息，心理学把这样一个信息称为“块”，估记每一门学问所包含的信息量大约是5万块，如果1分钟能记忆1“块”，那么5万块大约需要1000个小时，以每星期学习40小时计算，要掌握一门学问大约需要用6个月。 为了形象地说明，把西蒙学习法比做一把锥子。正如居里夫人所说，“知识的专一性像锥尖，精力的集中好比是锥子的作用力，时间的连续性好比是不停顿地使锥子往前钻进。” 西蒙学习法所支配的学习活动，呈现出一种尖锐猛烈、持续不断的态势。 为了感谢西蒙的这个研究成果，教育心理学界称这种学习法为西蒙学习法，又名 “锥形学习法”。 这种“锥形学习法”的高效原理在于，连续的长时间学习本身包涵对之前学习内容的应用，这样就省去了大量的复习时间。如果用烧水来做比喻，“锥形学习法”是连续的加热，所以热量散失的少；普通的间断学习是烧一会儿就停止加热，一段时间以后再继续加热，这样许多热量就白白散失了。两相比较，自然是持续“加热”效果显著了。 原理：烧一壶开水，如果断断续续地烧，1万个小时也烧不开，如果连续烧，1个小时就够用了。 四、SQ3R学习法 这种学习方法是由罗宾逊提出来的并盛行于美国大专院校。据了解，这种方法颇受中国大学生的喜爱，他们觉得这种方法人人都可以试用，都会取得一定的效果。 SQ3R代表： 纵览（Survey） 提问（Question） 阅读（Read） 背诵（Recite） 复习 (Revise） 1、纵览编辑 纵览就是对全书进行快速的浏览，弄清这本书的基本内容，对作者的基本观点有一个初步印象.一般来说，先阅读作者的序言（前言）或后记，了解作者写这本书的意图和目的，继而仔细查阅其目录和索引，如有可能，略读各章的提要或小结，确定全书阅读，或取其某些章节精读。纵览往往可以了解到最新信息，启发自己的思路。 2、提问编辑 大学生在学习过程中，不仅要学会解决问题，而更重要的是学会提出问题。在读书时，要透过书中表面字句去捕捉问题，敢于在无疑处生疑，提出自己的设想。同时，要认真琢磨其中的某些观点，并把它和自己所掌握的有关观点相对比、相联系，进行评论，提出问题。有了问题，就会进一步去探索，从而可能提炼出新观点。 3、阅读编辑 阅读的目的是为了正确理解和深入掌握文章的精髓，对重点章节学深吃透，做到融会贯通，使其成为自己知识结构的牢固基础。读书的最佳境界是“读懂书上没有的东西”。就是要懂得从明看出暗，从静看出动，从是看出非。读书要能看出书本含蓄之处，也就是书本的言外意、弦外音，这要靠读者自己去思考、捕捉和体会。书的东西，是死的,静止化了，而科学知识却日新月异，要能从过去的书本中看到现在，从现在的书本中想到将来，这样就能\"激活\"死的知识。书本知识是一定时代人们认识水平的记录，因而带有时代的烙印。瑕瑜相杂、正误互见。看出或指出书本中的谬误、漏洞，并非专家、权威莫属，每一位深思的读者都能发现。因此，要养成思考的习惯，边读边想，必有所得。 4、背诵编辑 不是指逐句的复诵或默记，而是指在理解的基础上，集中精力把有关章节的中心思想和基本观点牢记在脑中，当然，不排除把某些重要的基本概念背诵出来。 5、复习编辑 需要长时间保留在记忆中的材料必须反复复习。注意每次复习，在内容上要有所开拓，有所发展。 SQ3R学习法原则上适用于所有的学科领域。 Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part1/efficient-communication.html":{"url":"wiki/part1/efficient-communication.html","title":"高效沟通","keywords":"","body":"高效沟通 Efficient communication 老板要善于提问 1. 引导 用提问的方式，\"倒逼\" 员工找到答案，从而提高员工的对与感与成就感。 永远不要给员工答案，要让员工给你答案，而且不要只给一个答案，一定要给多个答案。 2. 倾听 心态平和，毫无偏见，全面接收和理解对方的信息，而且不是只听自己想听的信息。 3. 共情 换位思考, 站在对方的立场设身处地思考和处理问题，晓之以理，动之以情。 (避免指责对方) 4. 高维 提升自己的格局观，能从全局利益、长远利益思考问题，解决问题。( 不纠结某一个细节) 5. 反馈 建立反馈机制，及时发现问题、解决问题、形成正向循环。 1-2-3 反馈机制（指定时间内处理不了问题，及时向上反馈） 好好说话的艺术 跟员工沟通 一对一会议 工作状态 个人发展 公司组织 员工对自己的看法 每半月一次 时间（30-60分钟） 绩效沟通 沟通一定要放在平时， 不要搞成像秋后算账一样！ 因为你是管理者， 不是地方监工 但要注意的是，反馈的过程中， 不是我在指责员工，而是我的帮助员工，一定要有帮扶的态度，这样员工会更容易接受。 特立独行的员工 当在一个人身上花的精力和时间成本，大于你到外面找一个更好的人或者能力相当的人来替代他的时候，你就要坚决地把他替换掉。 挽留离职员工 实在挽留不成的时候，也要注意经营好这份情意。 劝退员工 任何人都应该有可以纠正错误的机会，公司应该给员工这样的机会，员工也应该给公司同样的机会。 跟客户沟通 吸引客户的兴趣、帮客户发现问题和管理客户的期望。 跟老板沟通 了解你的的老板，赢得老板的信任，管理老板的期望，非暴力\"怼\" 老板。 Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part1/m1-ability.html":{"url":"wiki/part1/m1-ability.html","title":"快速提升一线管理者的战斗力","keywords":"","body":"快速提升一线管理者的战斗力 1. 认知升级 如何学习优秀管理者的底层思维模型？ 何为优秀的管理者？ 何为优秀的 Leader? 如何做到阴阳同体，Leader 的二维修炼？ 领导力如何快速修炼？ 目标：认知升级, 构建优秀管理者的思维模型 2. 建团队 优秀员工的画像是什么样的？ 如何制作出优秀员工的画像？ 如何利用优秀员工画像选对人、培养人、淘汰人？ 如何提升团队的凝聚力？ 目标：掌握建团队的关键能力 3. 定目标 如何正确理解团队目标？ 如何正确分解目标？ 如何统一团队目标和员工个人目标？ 如何运用PDCA达成团队目标？ 目标：掌握定目标的关键能力 4. 追过程 追过程中常用的有效沟通如何做？ 如何和不同沟通风格的人沟通？ 目标达成不理想，如何有效沟通？ 追过程中常用的有效辅导如何做？ 不同类型员工的有效辅导方法？ 目标：掌握追过程的关键能力 5. 拿结果 好过程和好结果的哪个更重要？ 如何通过Review帮助员工和团队获得成长？ 如何通过Review形成可持续拿结果的方法？ 目标：总结出可持续拿结果的方法 Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/sre.html":{"url":"wiki/part2/sre.html","title":"Part 2: SRE","keywords":"","body":"SRE 介绍 Site Reliability Engineering 一、SRE起源和发展 IT领域一直有很多趋势和流行关键词，比如微服务和DevOps，现在国内又兴起了SRE，它在传统运维之外又纳入更多的开发和流程部分。SRE是Site Reliability Engineer的简称，由谷歌公司首先提出，一开始是公司内部定义的一个工种。谷歌的SRE工程师对Borg分布式集群管理系统以及在此之上运行的Gmail、Google Docs、Web Search等以及各种APP应用进行运维。 这个岗位的工程师具有开发能力，又了解一些系统管理的知识，他们把一些最佳实践、方式、流程、方法都固化成代码，用这种方式去应对规模性的扩张，去应对复杂度的上升。从名字其实就可以看出SRE不只是做Operation方面的工作，更多是保障整个服务的稳定性。 SRE不仅仅是对分布式系统运维工程师的职业要求，还涉及运维的自动化、开发运维一体化、持续集成持续开发等理念、监控系统、部署、容量规划、可靠性技术和实践和运维团队建设等方面的内容。可为云服务提供商提高分布式系统的资源利用率，降低运营和运维成本，让系统可靠和稳定地运行，提升用户体验。 随着互联网的快速发展，分布式系统规模急剧扩展，新型系统的运维要求对传统运维理念提出了新的挑战。随着谷歌对大规模分布式集群和互联网应用运维经验的积累，SRE的实践理念得到国外各大互联网公司的采纳和应用。Site Reliability Engineer逐渐朝着Site Reliability Engineering的理论化方向发展。 由于互联网行业的特性和对速度的追求，一般这些新理念和新技术的发端和普及都是从互联网企业开始，国内也不例外。虽然很多国内互联网企业并没有明确提及SRE这个岗位名称，但是据我所知他们也是在向着SRE理念提及的很多方向在前进，比如自动化、工具化、平台化等等。不管国内称之为PE、运维工程师还是其他什么，其实做的事情也就是SRE在倡导的DevOps的运维实践 二、定位、方向与职责 总结一下，SRE 从岗位的角度上看：运维工程师升级版 从运维的方式上看：自动化、智能化、工具化、平台化 从工作的结果上看：保证系统稳定的前提下提高系统效率，平衡系统稳定性和用户体验的关系 三、实践 从SRE成功实践的几大要素看： 1、具有研发能力 2、一定要设定服务的SLA 3、有余量的预估 4、 SRE与研发有共享的资源工具 5、 SRE承担不超过50%的运维工作量 6、 每个事故都要做事后分析，并要聚焦于流程和技术。 Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/ops.html":{"url":"wiki/part2/ops.html","title":"OPS","keywords":"","body":"运维 接入 四层接入 七层接入 CDN IP 库 Nginx 服务集群 发布 容器 调度 容灾 数据一致性 容灾 多活 预案演练 CI/CD 持续集成 持续部署 数据库 同步 数据恢复 缓存 中间件 Kafka 消息中间件 MQ 数据安全及运维安全 WAF 大数据及分布式计算 Hadoop Ceph Hive 人工智能 语音识别 ASR 人脸识别 自然语言处理 NLP Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/":{"url":"wiki/","title":"1. Code","keywords":"","body":"Code Wiki Code Part dev Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/cicd.html":{"url":"wiki/part2/cicd.html","title":"2. CI/CD","keywords":"","body":"Code Wiki Code Part dev Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/linux.html":{"url":"wiki/part2/linux.html","title":"3. Linux Basic","keywords":"","body":"Linux Wiki Basic Linux Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/osinit.html":{"url":"wiki/part2/osinit.html","title":"4. OS Init","keywords":"","body":"Code Wiki Code Part dev Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/kube.html":{"url":"wiki/part2/kube.html","title":"5. kubernetes","keywords":"","body":"Code Wiki Code Part dev Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part2/gateway.html":{"url":"wiki/part2/gateway.html","title":"6. Gateway","keywords":"","body":"Code Wiki Code Part dev Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"wiki/part3/":{"url":"wiki/part3/","title":"Part 3: Application Performance","keywords":"","body":"Application 性能优化 Linux 底层优化 CPU￼ 进程和 CPU 原理 进程、线程与协程 CPU 调度 中断系统 CPU 缓存 NUMA 性能指标 平均复杂 CPU 使用率：用户 CPU, 系统CPU，iowait, 软中断，硬中断，窃取 CPU，客户 CPU. 上下文切换：自愿切换，非自愿切换 CPU 缓存命中率 性能剖析 top/htop/ps vmstat mpstat pidstat strace perf execsnoop proc 文件系统 调优方法 CPU 绑定 affinity 进程 CPU 资源限制 进程优先级调整 中断负载均衡 CPU 缓存 NUMA 优化 内存 内存原理 地址空间 虚拟内存 内存分配与回收 缓存与缓冲区 swap 性能指标 系统内存使用 进程内存使用 缓存与缓冲区命中率 性能剖析 free top sar vmstat cachestat cachetop memleak proc 文件系统 调优方法 利用缓存与缓冲区 减少 SWAP 使用 减少动态内存分配 优化 NUMA 限制进程内存资源 HugePage 网络 网络原理 网络配置 TCP/IP 协议 网络收据收发 高级路由 网络 QOS 网络防火墙 性能指标 吞吐量：BPS, QPS, PPS 延迟 丢包 TCP 重传 性能剖析 ethtool sar ping netstat/ss ifstat ifconfig tcpdump iptables traceroute ipcontrack perf 调优方法 网卡调优：MTU， 队列长度，链路聚合 协议调优：HTTP, TCP, overlay 资源控制：QoS 内核调优：NAT 优化，功能卸载，负载均衡，DPDK 磁盘IO￼ 磁盘原理 磁盘管理 磁盘内型，RAID 选型 磁盘接口 磁盘 I/O 栈 性能指标 使用率 IOPS 吞吐量 IO Wait 性能剖析 dstat sar iostat pidstat iotop iolatency blktrace fio perf 调优方法 系统调用 I/O 资源控制, 写对齐 充分利用缓存 RAID I/O 隔离 文件系统 文件原理： 虚拟文件系统 文件系统 IO 栈 文件系统缓 文件系统种类 性能指标： 容量 IOPS 缓存命中率 性能剖析 df strace vmstat sar perf proc 文件系统 调优方法 文件系统内型 利用文件系统缓存 I/O 隔离 Linux 内核优化 内核原理 内核态 模型 性能指标 性能剖析 BPF perf proc 文件系统 调优方法 内核参数 应用层优化 应用程序 性能指标 吞吐量 响应时间 资源使用率 性能剖析 USE 方法：使用率，饱和度，初五 进程剖析：进程状态，资源使用率，I/O 剖析， 系统调用，热点函数，动态追踪 APM 调优方法 逻辑优化 编程语言 算法调优 非阻塞 I/O 利用缓存与缓冲区 异步处理与并发 垃圾回收 架构设计 空间换时间 缓存 缓冲区 冗余数据 时间换空间： 压缩编码 页面交换 并行处理 多线程 多进程 协程 分布式 异步处理 异步 I/O 消息队列 事件通知 ￼ 性能监控 时间序列分析 历史趋势分析 性能模型构建 未来趋势预测 服务调用追踪 服务调用流程跟踪 服务调用性能分析 服务调用链拓扑展示 数据可视化 趋势图 散点图 热图 饼图 告警通知 阈值选择 动态阈值 报警策略 通知渠道 性能测试 明确需求 系统资源需求 应用程序需求 环境假设 合理的假设 生产环境模拟 生产负载模拟 性能测试 基准测试 负载测试 压力测试 结果分析 应用程序瓶颈 数据库瓶颈 系统资源瓶颈 Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "},"tags.html":{"url":"tags.html","title":"tags","keywords":"","body":"Tags Copyright © 2015-present airdb.            LastUpdated: 2020-06-30 02:19:22 "}}